// This file is generated. Please don't modify it directly.

import { Section } from '../types'

/**
 * This is content from the [aim42 Method Reference](https://aim42.github.io/)
 * by [Gernot Starke](https://www.gernotstarke.de/) and [community
 * contributors](https://github.com/aim42/aim42/graphs/contributors), used under
 * [CC BY-SA](https://creativecommons.org/licenses/by-sa/4.0/). If you distribute
 * it, make sure to attribute the original authors.
 */
export const bibliography: Section = {
  type: 'section',
  slug: 'bibliography',
  id: '_bibliography',
  sectionType: 'appendix',
  index: 8,
  caption: 'Appendix B: ',
  title: 'Bibliography',
  titlePlain: 'Bibliography',
  numeral: 'B',
  children: [
    {
      type: 'ulist',
      content:
        '<div class="ulist bibliography">\n<ul class="bibliography">\n<li>\n<p><a id="arc42"></a>[arc42] arc42: Resources for Software Architects. Practical template, liberal licence.\nAvailable in a variety of formats, see <a href="http://arc42.de">German website</a> or <a href="http://arc42.org">English website</a>.</p>\n</li>\n<li>\n<p><a id="Agans-Debugging"></a>[Agans-Debugging] David J. Agans: Debugging: The 9 Indispensable Rules for Finding Even the Mose\nElusive Software and Hardware Problems. Amacom Press, 2002. Although most developers take "debugging skills" for granted,\nthey sometimes spend too much time tracking too little bugs.</p>\n</li>\n<li>\n<p><a id="Ambler"></a>[Ambler] Scott Ambler on Database Refactoring: <a href="http://agiledata.org/essays/databaseRefactoring.html" class="bare">http://agiledata.org/essays/databaseRefactoring.html</a></p>\n</li>\n<li>\n<p><a id="Annett-Legacy"></a>[Annett-Legacy] Robert Annett: Working with Legacy Systems: A practical guide to the real systems we inherit.  <a href="http://leanpub.com/WorkingWithLegacySystems">Leanpub Publishing</a>.</p>\n</li>\n<li>\n<p><a id="Brown"></a>[Brown] William J. Brown: AntiPatterns: Refactoring Software,\nArchitecture and Projects in Crisis, John Wiley &amp; Sons, 1998&#8201;&#8212;&#8201;a tried and\ntrue work on things that tend to go wrong in software development and other\nprojects.</p>\n</li>\n<li>\n<p><a id="Berglung-AfferentCoupling"></a>[Berglung-AfferentCoupling] Tim Berglund (GitHub) on\n<a href="http://de.slideshare.net/jaxlondon2012/complexity-theory-and-software-development-tim-berglund">Complexity Theory and Software Development</a>. Look at slide 73ff on afferent coupling - and keep that in mind for your own refactorings.</p>\n</li>\n<li>\n<p><a id="Bass09"></a>[Bass09] Len Bass et.al.: Software Architecture in Practice. Addison-Wesley, 2. Edition 2009.</p>\n</li>\n<li>\n<p><a id="Big-Ball-Of-Mud"></a>[Big-Ball-Of-Mud] Brian Foote and Joseph Yoder, <a href="http://laputan.org/mud/">Big Ball of Mud</a> - very influentual paper from the <a href="http://hillside.net/plop/plop97/">fourth conference on Patterns languages of Program Design, PLoP97</a></p>\n</li>\n<li>\n<p><a id="BISBAL"></a>[BISBAL] BISBAL, J. et.al.: A Survey of Research into Legacy System Migration. Technical Report TCD-CS-1997-01, Computer Science Department, Trinity College Dublin, 1997. <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.50.9051" class="bare">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.50.9051</a></p>\n</li>\n<li>\n<p><a id="Bommer-Wartung"></a>[Bommer-Wartung] Christoph Bommer, M. Spindler, V. Barr: Softwarewartung: Grundlagen, Management und Wartungstechniken.\n(in German) dpunkt Verlag, 2008. Interesting treatment of categories of software systems and their respective need for maintenance and evolution. Authors quote studies from Lehman and Belady from the 1970&#8217;s.</p>\n</li>\n<li>\n<p><a id="Boy-Scout-Rule-article"></a>[Boy-Scout-Rule-article] The Boy Scout Rule, see <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule" class="bare">http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule</a></p>\n</li>\n<li>\n<p><a id="Brodie-Stonebraker"></a>[Brodie-Stonebraker] Brodie, M. and Stonebraker, M: Migrating Legacy Systems: Gateway, Interfaces &amp; the Incremental Approach; Morgan Kaufmann 1995.</p>\n</li>\n<li>\n<p><a id="Clements-ATAM"></a>[Clements-ATAM] Paul Clements et.al.: Evaluating Software Architecture - Methods and Case Studies.\nAddison-Wesley, 2001. Detailed overview of ATAM (and other evaluation methods).</p>\n</li>\n<li>\n<p><a id="Campbell14"></a>[Campbell14] Ann Campbell et. al: SonarQube in Action. Manning Publications, 2014. Great introduction to\nthe flexible, multi-language code-analysis toolkit.</p>\n</li>\n<li>\n<p><a id="ERDLE"></a>[ERDLE] ERDLE, C.: Management von Softwaresystemen – Legacy Migrationsstrategien. Seminar an der TU München, Fakultät Informatik, 2005. <a href="http://www4.in.tum.de/lehre/seminare/hs/WS0506/mvs/files/Ausarbeitung_Erdle.pdf" class="bare">http://www4.in.tum.de/lehre/seminare/hs/WS0506/mvs/files/Ausarbeitung_Erdle.pdf</a></p>\n</li>\n<li>\n<p><a id="Evans03"></a>[Evans03] Eric Evans: Domain-Driven Design: Tackling Complexity in the Heart of Software. Addison-Wesley, 2003.</p>\n</li>\n<li>\n<p><a id="Feathers"></a>[Feathers] Michael Feathers: Working Effectively with Legacy Code. Prentice Hall, 2005. The author claims "Code without tests is bad code". So true&#8230;&#8203;</p>\n</li>\n<li>\n<p><a id="Fowler-Refactoring"></a>[Fowler-Refactoring] Martin Fowler: Refactoring. Addision-Wesley. Addision-Wesley, 1999. See also <a href="http://www.refactoring.com/">refactoring.com</a></p>\n</li>\n<li>\n<p><a id="Freemann"></a>[Freemann] Steve Freeman, Nat Pryce: Growing Object Oriented Software By Tests. Addison-Wesley, 2010.</p>\n</li>\n<li>\n<p><a id="heath-decisive"></a>[heath-decisive] Chip and Dan Heath: Decisive: How to make better choices in life and work. Crown Publishing / Random House Books, 2013. A practical and pragmatic guide to decision making (both preparing and taking them) - not specific to software. They describe four pillars of systematic decision making, which we adopted for our cross-cutting practice <a href="#Systematic-Decisions">Systematic-Decisions</a>.</p>\n</li>\n<li>\n<p><a id="Henney"></a>[Henney] Kevlin Henney: 97 Things Every Programmer Should Know. O&#8217;Reilly Media, 2010, ISBN 0596809484, also <a href="http://programmer.97things.oreilly.com/wiki/index.php/97_Things_Every_Programmer_Should_Know">available online</a></p>\n</li>\n<li>\n<p><a id="Hunt-Archeology"></a>[Hunt-Archeology] Andy Hunt, Dave Thomas: <a href="http://media.pragprog.com/articles/mar_02_archeology.pdf">Software Archeology</a>, IEEE Software, March/April 2002</p>\n</li>\n<li>\n<p><a id="Impact-Mapping"></a>[Impact-Mapping] Gojko Adzic: <a href="http://impactmapping.org">Impact Mapping. Making a Big Impact With Software Products and Projects</a>.</p>\n</li>\n<li>\n<p><a id="ISO-9126"></a>[ISO-9126] ISO 9126 Quality Model: Hierarchical model for software quality, consisting of six major <em>quality topics</em> (functionality, reliability, usability, efficiency, maintainability and portability).</p>\n</li>\n<li>\n<p><a id="ISO-14764"></a>[ISO-14764] ISO/IEC 14764 Standard on Software Maintenance:2006. For a brief overview, see <a href="http://en.wikipedia.org/wiki/Software_maintenance">Wikepedia-entry on ISO-14764</a>.</p>\n</li>\n<li>\n<p><a id="ISO-25010"></a>[ISO-25010] ISO/IEC 25010 Systems and software Quality Requirements and Evaluation (SQuaRE)&#8201;&#8212;&#8201;System and software quality models. ISO-Standard model for software quality. Superseeds <a href="#ISO-9126">[ISO-9126]</a> and categorizes software quality into 8 <em>characteristics</em>: functional suitability, reliability, efficiency, operability, security, compatibility, maintainability, transferability. See <a href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=35733">ISO-25010 website</a>.</p>\n</li>\n<li>\n<p><a id="Keller-Migration"></a>[Keller-Migration] Wolfgang Keller: <a href="http://www.objectarchitects.de/ObjectArchitects/papers/WhitePapers/ZippedPapers/pacman03.pdf">The Bridge to the New Town</a> - A Legacy System Migration Pattern. EuroPLoP 2000, ISBN 3-87940-775-4</p>\n</li>\n<li>\n<p><a id="Lippert-Refactoring"></a>[Lippert-Refactoring] M.Lippert, S.Roock: Refactoring in Large Software Projects:\nPerforming Complex Restructurings Successfully, Wiley 2006</p>\n</li>\n<li>\n<p><a id="Martin-CleanCode"></a>[Martin-CleanCode] Robert Martin: Clean Code - A Handbook of Agile Software Craftmanship. Prentice Hall, 2009.\nA detailed writeup of how (object-oriented) code should look like. Lots of things we like.</p>\n</li>\n<li>\n<p><a id="Mikado"></a>[Mikado] Ola Elnestam, Daniel Brolund: The Mikado Method. Manning, 2014. Describes a method to <em>morphing</em> software from bad to better state. Quote from the book:\n&#8220;It helps us visualize, plan, and perform business-value-focused improvements over several iterations and increments of work, without ever having a broken codebase&#8221;</p>\n</li>\n<li>\n<p><a id="Moyer-Archeology"></a>[Moyer-Archeology] Brian Moyer: <a href="http://adm.omg.org/docs/Software_Archeology_4-Mar-2009.pdf">Software Archeology</a></p>\n</li>\n<li>\n<p><a id="Nygard07"></a>[Nygard07] Michael T. Nygard: Release It! Design and Deploy Production-Ready Software. Pragmatic Programmers, 2007.</p>\n</li>\n<li>\n<p><a id="Object-Oriented-Software-Construction"></a>[Object-Oriented-Software-Construction] Bertrand Meyer:\nObject-Oriented Software Construction, Prentice Hall (September\n1994), ISBN-13: 978-0136290490<br>\nOne of those old books which is has influenced many a software but\nis actually known to few.</p>\n</li>\n<li>\n<p><a id="Ogawa-Evolution"></a>[Ogawa-Evolution] Michael Ogawa: Software Evolution Storylines. Available as research paper, open-source code and\nonline. <a href="http://www.michaelogawa.com/research/storylines/">Visualizes interactions between developers in software systems</a></p>\n</li>\n<li>\n<p><a id="OORP"></a>[OORP] Serge Demeyer et. al: <a href="http://scg.unibe.ch/download/oorp/">Object-Oriented Reengineering Patterns</a>.\nA pattern-based approach to re-engineer object-oriented legacy systems. It contains a wealth of <a href="#Improve">improvement-patterns</a>, some named slightly different than their aim42-brethren.</p>\n</li>\n<li>\n<p><a id="Quality-Requirements"></a>[Quality-Requirements]\n<a href="https://github.com/arc42/quality-requirements">(Free) Examples of Practical Software Quality Requirements</a>.</p>\n</li>\n<li>\n<p><a id="Sadalage"></a> Sadalage, P.: Refactoring Databases: Evolutionary Database Design. Collection of patterns\nfor database refactoring. Online: <a href="http://databaserefactoring.com/" class="bare">http://databaserefactoring.com/</a></p>\n</li>\n<li>\n<p><a id="SEI-ATAM"></a>[SEI-ATAM] <a href="http://www.sei.cmu.edu/architecture/tools/evaluate/atam.cfm">Architecture Tradeoff Analysis Method</a>.\nSoftware Engineering Institute, Carnegie Mellon University.</p>\n</li>\n<li>\n<p><a id="SERIOUS"></a>[SERIOUS] Software Evolution, Refactoring, Improvement of Operational &amp; Usable Systems.\n<a href="https://itea3.org/project/serious.html">ITEA / EUREKA research project</a>.\nCompleted in 2008, holds a fairly large number of deliverables. Too bad, some of the result websites\nare down&#8230;&#8203;</p>\n</li>\n<li>\n<p><a id="SERIOUS-Refactoring"></a>[SERIOUS-Refactoring]\n<a href="http://lore.ua.ac.be/Publications/pdf/SERIOUSRefactoringHandbook.pdf">SERIOUS Refactoring Handbook</a>.</p>\n</li>\n<li>\n<p><a id="SERIOUS-Methods"></a>[SERIOUS-Methods] SERIOUS project.\n<a href="http://www.fmeainfocentre.com/updates/dec08/Overview%20and%20evaluation%20of%20design%20and%20refactoring%20methods.PDF">Overview and evaluation of design and refactoring methods</a></p>\n</li>\n<li>\n<p><a id="Software-Evolution"></a>[Software-Evolution] <a href="http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)2047-7481">Journal of Software: Evolution and Process</a>. Academic journal on software evolution and maintenance.</p>\n</li>\n<li>\n<p><a id="SonarQube"></a>[SonarQube] SonarQube is an <a href="http://sonarqube.org">free and open platform to measure manage code quality</a>, lots of plugins for\na variety of programming languages, plugins for different metrics and checks. SonarQube can track results over time - showing the history of code quality for software systems.</p>\n</li>\n<li>\n<p><a id="Spolsky-NeverRewrite"></a>[Spolsky-NeverRewrite] Joel Spolsky: <a href="http://www.joelonsoftware.com/articles/fog0000000069.html">Things You Should Never Do, Part-I</a></p>\n</li>\n<li>\n<p><a id="Tornhill-CrimeScene"></a>[Tornhill-CrimeScene] Adam Tornhill: <a href="https://pragprog.com/book/atcrime/your-code-as-a-crime-scene">Your Code as a Crime Scene</a>.\nUse forensic techniques to arrest defects, bottlenecks and bad design in your programs.\nPragmatic Programmers, 2015. Despite the seemingly funny title, this is one of the most practical books on analyzing source code from arbitrary languages.\nThe <a href="http://www.adamtornhill.com/articles/crimescene/codeascrimescene.htm">author</a> has implemented several of the ideas as open-source tools.</p>\n</li>\n<li>\n<p><a id="Tornhill-XRay"></a>[Tornhill-XRay] Adam Tornhill: <a href="https://pragprog.com/book/atevol/software-design-x-rays">Software Design X-Rays: Fix Technical Debt with Behavioral Code Analysis</a>. Pragmatic Programmers, 2018. This book focuses on the social behavior of software developers. It shows how you can spot knowledge loss, hidden change dependencies and hot spots of bad code.</p>\n</li>\n</ul>\n</div>'
    }
  ]
}
