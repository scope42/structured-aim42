interface HasId {
  /**
   * The ID of the node. This is mainly used as the anchor for linking.
   *
   * @see https://asciidoctor.github.io/asciidoctor.js/master/#abstractnodegetid
   */
  id: string
}

interface HasTitle {
  /**
   * The title of this node as rendered HTML.
   *
   * @see https://asciidoctor.github.io/asciidoctor.js/master/#abstractblockgettitle
   */
  title: string

  /**
   * The title of this node as plain text.
   */
  titlePlain: string

  /**
   * The numeral of this node (if section, relative to parent, otherwise absolute).
   * Only assigned to section if automatic section numbering is enabled. Only assigned to
   * formal block (block with title) if corresponding caption attribute is present. If the
   * section is an appendix, the numeral is a letter (starting with A).
   *
   * @see https://asciidoctor.github.io/asciidoctor.js/master/#abstractblockgetnumeral
   */
  numeral?: string | number

  /**
   * The caption of this node. If present, usually prepended to the title.
   *
   * @see https://asciidoctor.github.io/asciidoctor.js/master/#abstractblockgetcaption
   */
  caption?: string
}

export interface StructuralNode extends HasTitle {
  /**
   * Children of this stuctural node.
   *
   * @see https://asciidoctor.github.io/asciidoctor.js/master/#abstractblockgetblocks
   */
  children: Exclude<Node, Document>[]
}

export interface Document extends StructuralNode {
  type: 'document'
}

export interface Section extends StructuralNode, HasId {
  type: 'section'

  /**
   * A normalized form of the ID (generated by this project) that is e.g. used as directory name.
   */
  slug: string

  /**
   * The type of section, called "section name" by Asciidoctor.
   *
   * @see https://asciidoctor.github.io/asciidoctor.js/master/#sectiongetsectionname
   */
  sectionType: 'section' | 'appendix'

  /**
   * The 0-based index order of this section within the parent block.
   *
   * @see https://asciidoctor.github.io/asciidoctor.js/master/#sectiongetindex
   */
  index: number
}

// currently not used
interface ImageNode extends HasId, HasTitle {
  type: 'image'
  alt: string
  src: string
}

/**
 * A node that contains actual content instead of giving structure. This is not necessarily atomic
 * in the original Asciidoc, e.g. lists have inner structure. It is, however, assumed that this node
 * is typically rendered as a whole. Because of this, it is not devided more granularly by default.
 */
export interface AtomicNode {
  type:
    | 'paragraph'
    | 'image'
    | 'table'
    | 'admonition'
    | 'ulist'
    | 'olist'
    | 'dlist'
    | 'pass'
    | 'example'
    | 'quote'
    | 'listing'

  /**
   * Content of this block node as rendered HTML.
   */
  content: string
}

export type Node = Document | Section | AtomicNode

export type Atomic<T extends StructuralNode> = Omit<T, 'children'> & {
  content: string
}
